import Image from 'next/image';

import { BlogPost } from '@/types/postData';
import Header4 from '../components/header4';

export const post10: BlogPost = {
  id: '10',
  imagePath: '/images/blog-passport-auth.jpg',
  title: 'Login Logic: Unlocking the Secrets of Secure Sign-Ins',
  date: '2024-03-18',
  link: 'https://www.linkedin.com/posts/michael-mcguiness-react_express-express-session-and-passportjs-activity-7175550724531990529-qC_b',
  content: (
    <div className='flex flex-col gap-y-4'>
      <p>
        {`Express, Express-Session, and Passport.js are powerful tools that
          greatly simplify the process of handling authentication in a web
          application. However, even with these tools, there are still many
          moving parts to understand and implement correctly. That's why I
          wanted to create a step-by-step explanation and diagram to illustrate
          how I recently used these technologies to add authentication to a
          business app.`}
      </p>
      <p>
        {`In this post, we'll focus on the 'local' authentication strategy,
          which typically involves using a username and password. I'll walk you
          through each step of the process, from the user submitting their
          credentials to the server sending a response back to the client.`}
      </p>

      <ul className='flex list-decimal flex-col gap-y-3 ps-4'>
        <li>
          <Header4>User submits login credentials</Header4>
          {`The user enters their login credentials (usually username and
            password) on the login page and submits the form.`}
        </li>
        <li>
          <Header4>Receive request on back end</Header4>
          {`The server, leveraging Express, receives the login request and
            prepares to authenticate the user with Passport's 'local' strategy.`}
        </li>
        <li>
          <Header4>Check credentials against database</Header4>
          {`Using Passport's LocalStrategy, the server validates the submitted
            credentials against the stored user data in the database.`}
        </li>
        <li>
          <Header4>Determine session data</Header4>
          {`Successful authentication triggers Passport's serializeUser
            function, deciding which user data (here, the user's ID) is saved in
            the session.`}
        </li>
        <li>
          <Header4>Passport attaches user ID to session</Header4>
          {`This step, handled internally by Passport, involves linking the
            user's ID to the newly created session, marking the beginning of the
            session management.`}
        </li>
        <li>
          <Header4>Express-Session stores session in database</Header4>
          Express-Session takes over to store the session information
          server-side, including the user ID.
        </li>
        <li>
          <Header4>Express-Session creates session cookie</Header4>A session
          cookie, with a unique session ID, is generated by Express-Session.
        </li>
        <li>
          <Header4>Express-Session stores cookie in response header</Header4>
          The session cookie is stored in the response header, allowing the
          client to include it in subsequent requests to maintain the session
          state.
        </li>
        <li>
          <Header4>Send response to front end</Header4>
          The server sends the response back to the client, typically
          redirecting the user to a protected page or sending a success message.
        </li>
      </ul>

      <Image
        src='/images/login.jpg'
        width={0}
        height={0}
        sizes='100vw'
        className='mx-auto h-auto w-full max-w-2xl'
        alt='Diagram showing login flow'
      />
    </div>
  ),
};
